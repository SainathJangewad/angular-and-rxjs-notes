Constructor
Purpose: Initialize class members and inject dependencies.
 The constructor is called before any lifecycle hooks, including ngOnInit().
---------------------------------------------------------------
ngOnChanges
Purpose: Respond to changes in @Input properties.

Example:

ngOnChanges(changes: SimpleChanges) {
  console.log('ngOnChanges - user data changes:', changes);
}
This hook is called whenever the user input property changes, allowing you to act on those changes.
NOTE:
If your component has no inputs or you use it without providing any inputs, the framework will not call ngOnChanges().
---------------------------------------------------------------

ngOnInit
Purpose: Perform component initialization.

Example:
ngOnInit() {
  console.log('ngOnInit - initializing user data');
  // Simulate fetching data from an API
  this.user = { name: 'John Doe', bio: 'Software Developer' };
}
Use this hook to initialize data, typically fetching it from a service.
NOTE:
ngOnInit() is still called even when ngOnChanges() is not (which is the case when there are no template-bound inputs).
---------------------------------------------------------------

ngDoCheck
Purpose: Custom change detection.

Example: 
ngDoCheck() {
  console.log('ngDoCheck - checking user data');
}
Use this hook if you need to implement custom change detection logic. It's called with every change detection cycle.
Performance Consideration

Be mindful of performance when using ngDoCheck(), as it runs frequently during the change detection cycle.
Ensure that the logic within it is optimized to avoid potential performance issues.
---------------------------------------------------------------

ngAfterContentInit
Purpose: Respond after Angular projects external content into the component's view.

Example: 
ngAfterContentInit() {
  console.log('ngAfterContentInit - content initialized');
}
Use this hook to initialize any logic that depends on projected content.
Called once after the first ngDoCheck().

In Angular, "projected content" refers to content that is passed into a component from a parent component using Angular's content projection feature, often with <ng-content>. 
This allows you to create reusable components that can accept and render custom content defined by the parent component.

What "Respond after Angular projects external content into the component's view" Means
When Angular projects external content into a component's view:

Content Projection: You define a placeholder in your component's template using <ng-content>, which allows the parent component to insert HTML or other components.

ngAfterContentInit Lifecycle Hook: This hook is called after Angular has projected the content into the component.
At this point, the component can access the projected content and perform any initialization or logic that depends on it.

Example Scenario
Consider you have a parent component that uses a custom card component, where you want to project some content into the card:

Parent Component Template:
<app-card>
  <h2>Title</h2>
  <p>This is the projected content inside the card.</p>
</app-card>

Card Component:

import { Component, AfterContentInit } from '@angular/core';

@Component({
  selector: 'app-card',
  template: `
    <div class="card">
      <ng-content></ng-content> <!-- Placeholder for projected content -->
    </div>
  `
})
export class CardComponent implements AfterContentInit {
  ngAfterContentInit() {
    console.log('ngAfterContentInit - content initialized');
    // Here you can access the projected content if needed
  }
}

In Summary
Purpose of ngAfterContentInit: This lifecycle hook allows you to react to the initialization of content that has been projected into your component.
When it's Called: It is called once after Angular finishes projecting the external content, right after the first ngDoCheck() call.
Use Cases: You might want to manipulate the projected content, apply certain styles, or initialize component logic that relies on this external content during this phase.
---------------------------------------------------------------

ngAfterContentChecked
Purpose: Respond after Angular checks the projected content.

Example: 
ngAfterContentChecked() {
  console.log('ngAfterContentChecked - content checked');
}
Use this hook to perform actions after the content has been checked.
Called after ngAfterContentInit() and every subsequent ngDoCheck().
---------------------------------------------------------------

ngAfterViewInit
Purpose: Respond after Angular initializes the component's view.

Example: 
ngAfterViewInit() {
  console.log('ngAfterViewInit - view initialized');
  console.log('User info content:', this.userInfo.nativeElement.textContent);
}
This is a good place to perform logic that needs to run after the view is fully initialized.
Called once after the first ngAfterContentChecked().
---------------------------------------------------------------

ngAfterViewChecked
Purpose: Respond after Angular checks the component's view.

Example: 
ngAfterViewChecked() {
  console.log('ngAfterViewChecked - view checked');
}
Use this hook to act on changes after the view has been checked.
---------------------------------------------------------------

ngOnDestroy
Purpose: Cleanup before Angular destroys the component.

Example: 
ngOnDestroy() {
  console.log('ngOnDestroy - cleanup before destroying');
}
This is the place to perform cleanup, such as unsubscribing from observables or detaching event handlers.
---------------------------------------------------------------


Execution Order
ngOnChanges()
ngOnInit()
ngDoCheck()
ngAfterContentInit()
ngAfterContentChecked()
ngAfterViewInit()
ngAfterViewChecked()
ngOnDestroy()
